name: "Terraform Development Environment"

on:
  push:
    branches: ["main"]
    paths:
      - "MTU/5.2 terraform cicd/environments/dev/**"
      - ".github/workflows/terraform-dev.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "MTU/5.2 terraform cicd/environments/dev/**"
      - ".github/workflows/terraform-dev.yml"

permissions:
  contents: read
  pull-requests: write

env:
  TF_VERSION: "1.9.8"
  AWS_REGION: "us-east-1"

jobs:
  # Job 1: Deploy to Development
  terraform-dev:
    name: "Deploy to Development"
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        shell: bash
        working-directory: MTU/5.2 terraform cicd/environments/dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## üèóÔ∏è Terraform Development Environment

            | Check | Status |
            |-------|--------|
            | üñå Format | \`${{ steps.fmt.outcome }}\` |
            | ‚öôÔ∏è Init | \`${{ steps.init.outcome }}\` |
            | ü§ñ Validate | \`${{ steps.validate.outcome }}\` |
            | üìñ Plan | \`${{ steps.plan.outcome }}\` |

            <details><summary>üìã Show Terraform Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Triggered by @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Extract Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: extract_outputs
        run: |
          # Extract all outputs as JSON (with error handling)
          echo "Extracting Terraform outputs..."

          if terraform output -json > /tmp/tf_outputs.json 2>/dev/null; then
            OUTPUTS=$(cat /tmp/tf_outputs.json)
            
            # Check if outputs is empty or just "{}"
            if [ "$OUTPUTS" = "{}" ] || [ -z "$OUTPUTS" ]; then
              echo "No outputs found from Terraform"
              OUTPUTS='{"status": "no_outputs", "message": "Deployment successful but no outputs defined"}'
            else
              echo "Terraform outputs found:"
              echo "$OUTPUTS" | jq . || echo "Warning: Could not format JSON, but outputs exist"
            fi
          else
            echo "Warning: Could not extract Terraform outputs, deployment may have failed"
            OUTPUTS='{"status": "error", "message": "Could not extract outputs"}'
          fi

          echo "DEV_OUTPUTS=$OUTPUTS" >> $GITHUB_OUTPUT

      - name: Create Development Summary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "# üèóÔ∏è Development Environment Deployed" >> $GITHUB_STEP_SUMMARY
          echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY

          if terraform output -json > /tmp/summary_outputs.json 2>/dev/null && [ -s /tmp/summary_outputs.json ]; then
            cat /tmp/summary_outputs.json | jq . >> $GITHUB_STEP_SUMMARY 2>/dev/null || cat /tmp/summary_outputs.json >> $GITHUB_STEP_SUMMARY
          else
            echo '{"status": "deployed", "message": "Development environment deployed successfully"}' >> $GITHUB_STEP_SUMMARY
          fi

          echo '```' >> $GITHUB_STEP_SUMMARY

    outputs:
      dev_outputs: ${{ steps.extract_outputs.outputs.DEV_OUTPUTS }}

  # Job 2: Run Infrastructure Tests
  terraform-test:
    name: "Run Infrastructure Tests"
    runs-on: ubuntu-latest
    needs: terraform-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: MTU/5.2 terraform cicd/tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        run: go mod download

      - name: Run Terratest on Development Environment
        run: |
          echo "üß™ Testing the existing development environment..."
          echo "üìã This validates the S3 bucket that was just deployed"
          go test -v -timeout 15m -run TestTerraformCICDDev ./...

      - name: Create Test Summary
        if: always()
        run: |
          echo "# üß™ Development Environment Tests Completed" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ All tests passed - development environment is validated" >> $GITHUB_STEP_SUMMARY
            echo "üöÄ Development environment is ready" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Some tests failed - check logs above" >> $GITHUB_STEP_SUMMARY
            echo "üõë Development environment needs attention" >> $GITHUB_STEP_SUMMARY
          fi
