name: "Terraform Production Environment"

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for production deployment"
        required: true
        default: "Production deployment"
  pull_request:
    branches: ["main"]
    paths:
      - "MTU/5.2 terraform cicd/environments/prod/**"
      - ".github/workflows/terraform-prod.yml"
  push:
    branches: ["main"]
    paths:
      - "MTU/5.2 terraform cicd/environments/prod/**"
      - ".github/workflows/terraform-prod.yml"

permissions:
  contents: read

env:
  TF_VERSION: "1.9.8"
  AWS_REGION: "us-east-1"

jobs:
  # Job 1: Deploy to Production
  terraform-prod:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: MTU/5.2 terraform cicd/environments/prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log Deployment Reason
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "🚀 Production deployment triggered manually"
          echo "📋 Reason: ${{ github.event.inputs.reason }}"
          echo "👤 Triggered by: ${{ github.actor }}"

      - name: Log Tag Deployment
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "🚀 Production deployment triggered by tag"
          echo "🏷️ Tag: ${{ github.ref_name }}"
          echo "👤 Triggered by: ${{ github.actor }}"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

      - name: Review Plan
        run: |
          echo "📋 Please review the Terraform plan above before proceeding"
          echo "🔍 Verify all changes are expected for production environment"
          echo "✅ If plan looks correct, the deployment will proceed automatically"

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Extract Production Outputs
        id: extract_prod_outputs
        run: |
          echo "Extracting Terraform outputs..."

          # Simple, bulletproof output extraction - no JSON parsing
          if terraform output > /dev/null 2>&1; then
            echo "✅ Terraform outputs found"
            terraform output 2>/dev/null || echo "No outputs available"
            echo "PROD_OUTPUTS=outputs_found" >> $GITHUB_OUTPUT
          else
            echo "✅ No outputs defined (this is normal for simple deployments)"
            echo "PROD_OUTPUTS=no_outputs" >> $GITHUB_OUTPUT
          fi

      - name: Validate Production Infrastructure
        run: |
          echo "🔍 Validating production infrastructure..."

          # Simple validation - if we got here, deployment succeeded
          PROD_STATUS='${{ steps.extract_prod_outputs.outputs.PROD_OUTPUTS }}'
          echo "Production status: $PROD_STATUS"

          if [ "$PROD_STATUS" = "outputs_found" ]; then
            echo "✅ Production infrastructure validated with outputs"
          else
            echo "✅ Production infrastructure validated (no outputs defined)"
          fi

          echo "🚀 Production deployment completed successfully!"

      - name: Create Production Summary
        run: |
          echo "# 🚀 Production Environment Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output 2>/dev/null || echo "No outputs defined" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

    outputs:
      prod_outputs: ${{ steps.extract_prod_outputs.outputs.PROD_OUTPUTS }}

  # Job 2: Run Production Tests (Optional)
  terraform-prod-test:
    name: "Run Production Tests"
    runs-on: ubuntu-latest
    needs: terraform-prod
    if: always() && needs.terraform-prod.result == 'success'

    defaults:
      run:
        shell: bash
        working-directory: MTU/5.2 terraform cicd/tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        run: go mod download

      - name: Run Terratest on Production Environment
        run: |
          echo "🧪 Testing the production environment..."
          echo "📋 This validates the S3 bucket that was just deployed"
          go test -v -timeout 15m -run TestTerraformCICDProd ./...

      - name: Create Production Test Summary
        if: always()
        run: |
          echo "# 🧪 Production Environment Tests Completed" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ All production tests passed - environment is validated" >> $GITHUB_STEP_SUMMARY
            echo "🎉 Production deployment is fully verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some production tests failed - check logs above" >> $GITHUB_STEP_SUMMARY
            echo "🚨 Production environment may need attention" >> $GITHUB_STEP_SUMMARY
          fi
